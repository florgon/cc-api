"""Add user model

Revision ID: 6717fdd645be
Revises: bdd69a039098
Create Date: 2023-01-08 11:06:17.565677

Copyright (C) 2022-2023 Stepan Zubkov <stepanzubkov@florgon.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "6717fdd645be"
down_revision = "bdd69a039098"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("url_view")
    op.drop_table("referer")
    op.drop_table("user_agent")
    op.drop_table("url")
    with op.batch_alter_table("urls", schema=None) as batch_op:
        batch_op.add_column(sa.Column("user_id", sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, "users", ["user_id"], ["id"])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("urls", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="foreignkey")
        batch_op.drop_column("user_id")

    op.create_table(
        "url_view",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("ip", sa.VARCHAR(length=15), autoincrement=False, nullable=False),
        sa.Column("user_agent_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "view_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("url_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("referer_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["referer_id"], ["referer.id"], name="url_view_referer_id_fkey"
        ),
        sa.ForeignKeyConstraint(["url_id"], ["url.id"], name="url_view_url_id_fkey"),
        sa.ForeignKeyConstraint(
            ["user_agent_id"], ["user_agent.id"], name="url_view_user_agent_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="url_view_pkey"),
    )
    op.create_table(
        "user_agent",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "user_agent_value",
            sa.VARCHAR(length=4096),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="user_agent_pkey"),
    )
    op.create_table(
        "url",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("redirect", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "expiration_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("stats_is_public", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("is_deleted", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="url_pkey"),
    )
    op.create_table(
        "referer",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "referer_value",
            sa.VARCHAR(length=4096),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="referer_pkey"),
    )
    op.drop_table("users")
    # ### end Alembic commands ###
