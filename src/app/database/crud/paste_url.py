"""
    PasteUrl CRUD urils for the database.
"""
from hashids import Hashids
from flask import current_app
from flask_sqlalchemy import SQLAlchemy

from app.database.models.url import PasteUrl

def create_url(
    db: SQLAlchemy,
    content: str,
    stats_is_public: bool = False,
    owner_id: int | None = None,
) -> PasteUrl:
    """
    Creates new shortened paste url in database.
    :param SQLAlchemy db: database object
    :param str content: paste text content
    :param int | None owner_id: id of local user
    :return: created url object
    :rtype: RedirectUrl
    """
    url = PasteUrl(
        content=content,
        stats_is_public=stats_is_public,
        owner_id=owner_id,
    )

    db.session.add(url)
    db.session.commit()
    db.session.refresh(url)

    return url


def get_by_owner_id(owner_id: int) -> list[PasteUrl]:
    """
    Returns PasteUrls with specified owner_id.
    :param int owner_id: id of owner
    :return: List with URLs.
    :rtype: list[PasteUrl]
    """
    return PasteUrl.query.filter_by(owner_id=owner_id)


def get_by_hash(url_hash: str, only_active: bool = True) -> PasteUrl | None:
    """
    Get paste url from database by hash generated by hashids.
    Decodes hash and get url from database by decoded id.
    :param SQLAlchemy db: database object
    :param str url_hash: hashids hash
    :param bool only_active: search url from active (with is_deleted = False) urls
    :return: url object
    :rtype: PasteUrl or None if hash is invalid
    """
    hashids = Hashids(salt=current_app.config["HASHIDS_SALT"], min_length=6)
    url_ids: tuple[int] = hashids.decode(url_hash)
    if len(url_ids) != 1:
        return None
    url_id = url_ids[0]
    url = PasteUrl.query.filter_by(id=url_id)
    if only_active:
        url = url.filter_by(is_deleted=False)
    return url.first()


def delete(db: SQLAlchemy, url: PasteUrl) -> None:
    """
    Deletes paste url and views.
    :param SQLAlchemy db: database object
    :param PasteUrl url: url object
    """
    url.is_deleted = True
    db.session.commit()
